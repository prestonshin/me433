import matplotlib.pyplot as plt # for plotting
import numpy as np # for sine function
import csv


file = 'C:/Users/prest/Documents/GitHub/me433/HW10/sigD.csv'

filters = [
       [
    0.050864468366675471,
    0.051447898537001137,
    0.051965975783172462,
    0.052417478485077405,
    0.052801340859369245,
    0.053116655958639653,
    0.053362678224921099,
    0.053538825589686409,
    0.053644681113902914,
    0.053679994163108466,
    0.053644681113902914,
    0.053538825589686409,
    0.053362678224921099,
    0.053116655958639653,
    0.052801340859369245,
    0.052417478485077405,
    0.051965975783172462,
    0.051447898537001137,
    0.050864468366675471,
], [
    0.090011231804371733,
    0.090548754148121274,
    0.090968151967928110,
    0.091268433002908794,
    0.091448886490887463,
    0.091509085171565419,
    0.091448886490887463,
    0.091268433002908794,
    0.090968151967928110,
    0.090548754148121274,
    0.090011231804371733,
], [
    -0.000000000000000001,
    0.000064393676763220,
    0.000271319801257540,
    0.000649073204382278,
    0.001235623050647806,
    0.002076637553675906,
    0.003222058252059904,
    0.004721452177155942,
    0.006618513253826244,
    0.008945196904421814,
    0.011716041834802050,
    0.014923251981835048,
    0.018533075973444006,
    0.022483932798082779,
    0.026686597480116862,
    0.031026590809771163,
    0.035368727580917296,
    0.039563585562856544,
    0.043455480385182557,
    0.046891386356592825,
    0.049730143962839937,
    0.051851251307310706,
    0.053162553912562159,
    0.053606224358990776,
    0.053162553912562159,
    0.051851251307310706,
    0.049730143962839930,
    0.046891386356592839,
    0.043455480385182564,
    0.039563585562856544,
    0.035368727580917296,
    0.031026590809771187,
    0.026686597480116866,
    0.022483932798082775,
    0.018533075973443999,
    0.014923251981835051,
    0.011716041834802057,
    0.008945196904421819,
    0.006618513253826253,
    0.004721452177155945,
    0.003222058252059902,
    0.002076637553675908,
    0.001235623050647806,
    0.000649073204382280,
    0.000271319801257541,
    0.000064393676763220,
    -0.000000000000000001,
], [
    0.004321734446567168,
    0.004964181359029018,
    0.006726853024102915,
    0.009590710694428429,
    0.013477194377763563,
    0.018250807495402411,
    0.023724953403477973,
    0.029670748540558761,
    0.035828357100486319,
    0.041920237367045872,
    0.047665569920356123,
    0.052795060488147479,
    0.057065280347479520,
    0.060271727052549448,
    0.062259856977999038,
    0.062933454809211808,
    0.062259856977999038,
    0.060271727052549441,
    0.057065280347479534,
    0.052795060488147492,
    0.047665569920356143,
    0.041920237367045886,
    0.035828357100486347,
    0.029670748540558775,
    0.023724953403477980,
    0.018250807495402411,
    0.013477194377763560,
    0.009590710694428432,
    0.006726853024102912,
    0.004964181359029018,
    0.004321734446567168,
], [
    -0.000000000000000001,
    0.000064393676763220,
    0.000271319801257540,
    0.000649073204382278,
    0.001235623050647806,
    0.002076637553675906,
    0.003222058252059904,
    0.004721452177155942,
    0.006618513253826244,
    0.008945196904421814,
    0.011716041834802050,
    0.014923251981835048,
    0.018533075973444006,
    0.022483932798082779,
    0.026686597480116862,
    0.031026590809771163,
    0.035368727580917296,
    0.039563585562856544,
    0.043455480385182557,
    0.046891386356592825,
    0.049730143962839937,
    0.051851251307310706,
    0.053162553912562159,
    0.053606224358990776,
    0.053162553912562159,
    0.051851251307310706,
    0.049730143962839930,
    0.046891386356592839,
    0.043455480385182564,
    0.039563585562856544,
    0.035368727580917296,
    0.031026590809771187,
    0.026686597480116866,
    0.022483932798082775,
    0.018533075973443999,
    0.014923251981835051,
    0.011716041834802057,
    0.008945196904421819,
    0.006618513253826253,
    0.004721452177155945,
    0.003222058252059902,
    0.002076637553675908,
    0.001235623050647806,
    0.000649073204382280,
    0.000271319801257541,
    0.000064393676763220,
    -0.000000000000000001,
]
]


for filter in filters:
    X = len(filter)

    t = [] # column 0
    data1 = [] # column 1
    filtered_data = []

    with open(file) as f:
        # open the csv file
        reader = csv.reader(f)


        i = 0
        for row in reader:
            # read the rows 1 one by one
            t.append(float(row[0])) # leftmost column
            data = float(row[1])
            data1.append(data) # second column
            avg = 0
            if i < X:
                for number in range(i):
                    avg += data1[number]*filter[number]
            else:
                for number in range(X):
                    avg += data1[i-X+number]*filter[number]
            filtered_data.append(avg)
            i += 1


    # FFT
    Fs = (1.0*(len(t)))/t[-1] # sample rate
    print(Fs)
    Ts = 1.0/Fs; # sampling interval
    ts = t
    y = data1 # the data to make the fft from
    n = len(y) # length of the signal
    k = np.arange(n)
    T = n/Fs
    frq = k/T # two sides frequency range
    frq = frq[range(int(n/2))] # one side frequency range
    Y = np.fft.fft(y)/n # fft computing and normalization
    Y = Y[range(int(n/2))]


    # Filtered data FFT
    y_filtered = filtered_data
    n_filtered = len(y_filtered)
    k_filtered = np.arange(n_filtered)
    T_filtered = n_filtered/Fs
    frq_filtered = k_filtered/T_filtered
    frq_filtered = frq_filtered[range(int(n_filtered/2))]
    Y_filtered = np.fft.fft(y_filtered)/n_filtered
    Y_filtered = Y_filtered[range(int(n_filtered/2))]


    fig, (ax1, ax2) = plt.subplots(2, 1)
    plt.suptitle(f'SigD FIR (Cutoff = 100 Hz, Transition = 1000 Hz, Rectangular)')
    ax1.plot(t, data1, 'k', label='Unfiltered', linewidth=1)
    ax1.plot(t, filtered_data, 'r', label='Filtered', linewidth=1)
    ax1.set_xlabel('Time')
    ax1.set_ylabel('Amplitude')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    ax1.set_xlabel('Time')

    ax1.set_ylabel('Amplitude')
    ax2.loglog(frq, abs(Y), 'k', label='Unfiltered', linewidth=1)
    ax2.loglog(frq_filtered, abs(Y_filtered), 'r', label='Filtered', linewidth=1)
    ax2.set_xlabel('Freq (Hz)')
    ax2.set_ylabel('|Y(freq)|')
    ax2.legend()
    ax2.grid(True, alpha=0.3)

    ax2.set_xlabel('Freq (Hz)')
    ax2.set_ylabel('|Y(freq)|')

    plt.show()


